//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 05-01-2022 09:49:11
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace PraticelinqDatabseContext
{

    [DatabaseAttribute(Name = "PraticelinqDatabse")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class PraticelinqDatabseDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(PraticelinqDatabseDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAuthor(Author instance);
        partial void UpdateAuthor(Author instance);
        partial void DeleteAuthor(Author instance);
        partial void InsertBookAuthor(BookAuthor instance);
        partial void UpdateBookAuthor(BookAuthor instance);
        partial void DeleteBookAuthor(BookAuthor instance);
        partial void InsertBookDetail(BookDetail instance);
        partial void UpdateBookDetail(BookDetail instance);
        partial void DeleteBookDetail(BookDetail instance);
        partial void InsertBookIssue(BookIssue instance);
        partial void UpdateBookIssue(BookIssue instance);
        partial void DeleteBookIssue(BookIssue instance);
        partial void InsertBookReturn(BookReturn instance);
        partial void UpdateBookReturn(BookReturn instance);
        partial void DeleteBookReturn(BookReturn instance);
        partial void InsertReport(Report instance);
        partial void UpdateReport(Report instance);
        partial void DeleteReport(Report instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertUser1(User1 instance);
        partial void UpdateUser1(User1 instance);
        partial void DeleteUser1(User1 instance);

        #endregion

        public PraticelinqDatabseDataContext() :
        base(@"Data Source=DESKTOP-JFJO2JL;Initial Catalog=PraticelinqDatabse;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public PraticelinqDatabseDataContext(MappingSource mappingSource) :
        base(@"Data Source=DESKTOP-JFJO2JL;Initial Catalog=PraticelinqDatabse;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public PraticelinqDatabseDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PraticelinqDatabseDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PraticelinqDatabseDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PraticelinqDatabseDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Author> Authors
        {
            get
            {
                return this.GetTable<Author>();
            }
        }

        public Devart.Data.Linq.Table<BookAuthor> BookAuthors
        {
            get
            {
                return this.GetTable<BookAuthor>();
            }
        }

        public Devart.Data.Linq.Table<BookDetail> BookDetails
        {
            get
            {
                return this.GetTable<BookDetail>();
            }
        }

        public Devart.Data.Linq.Table<BookIssue> BookIssues
        {
            get
            {
                return this.GetTable<BookIssue>();
            }
        }

        public Devart.Data.Linq.Table<BookReturn> BookReturns
        {
            get
            {
                return this.GetTable<BookReturn>();
            }
        }

        public Devart.Data.Linq.Table<Report> Reports
        {
            get
            {
                return this.GetTable<Report>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<User1> User1s
        {
            get
            {
                return this.GetTable<User1>();
            }
        }
    }
}

namespace PraticelinqDatabseContext
{

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.Author in the schema.
    /// </summary>
    [Table(Name = @"dbo.Author")]
    public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AuthorID;

        private string _AuthorName;
        #pragma warning restore 0649

        private EntitySet<BookAuthor> _BookAuthors;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAuthorIDChanging(int value);
        partial void OnAuthorIDChanged();
        partial void OnAuthorNameChanging(string value);
        partial void OnAuthorNameChanged();
        #endregion

        public Author()
        {
            this._BookAuthors = new EntitySet<BookAuthor>(new Action<BookAuthor>(this.attach_BookAuthors), new Action<BookAuthor>(this.detach_BookAuthors));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AuthorID in the schema.
        /// </summary>
        [Column(Storage = "_AuthorID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AuthorID
        {
            get
            {
                return this._AuthorID;
            }
            set
            {
                if (this._AuthorID != value)
                {
                    this.OnAuthorIDChanging(value);
                    this.SendPropertyChanging("AuthorID");
                    this._AuthorID = value;
                    this.SendPropertyChanged("AuthorID");
                    this.OnAuthorIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AuthorName in the schema.
        /// </summary>
        [Column(Storage = "_AuthorName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AuthorName
        {
            get
            {
                return this._AuthorName;
            }
            set
            {
                if (this._AuthorName != value)
                {
                    this.OnAuthorNameChanging(value);
                    this.SendPropertyChanging("AuthorName");
                    this._AuthorName = value;
                    this.SendPropertyChanged("AuthorName");
                    this.OnAuthorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookAuthors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Author_BookAuthor", Storage="_BookAuthors", ThisKey="AuthorID", OtherKey="AuthorID", DeleteRule="NO ACTION")]
        public EntitySet<BookAuthor> BookAuthors
        {
            get
            {
                return this._BookAuthors;
            }
            set
            {
                this._BookAuthors.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BookAuthors(BookAuthor entity)
        {
            this.SendPropertyChanging("BookAuthors");
            entity.Author = this;
        }
    
        private void detach_BookAuthors(BookAuthor entity)
        {
            this.SendPropertyChanging("BookAuthors");
            entity.Author = null;
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.BookAuthor in the schema.
    /// </summary>
    [Table(Name = @"dbo.BookAuthor")]
    public partial class BookAuthor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BookID;

        private int _AuthorID;
        #pragma warning restore 0649

        private EntityRef<Author> _Author;

        private EntityRef<BookDetail> _BookDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBookIDChanging(int value);
        partial void OnBookIDChanged();
        partial void OnAuthorIDChanging(int value);
        partial void OnAuthorIDChanged();
        #endregion

        public BookAuthor()
        {
            this._Author  = default(EntityRef<Author>);
            this._BookDetail  = default(EntityRef<BookDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BookID in the schema.
        /// </summary>
        [Column(Storage = "_BookID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int BookID
        {
            get
            {
                return this._BookID;
            }
            set
            {
                if (this._BookID != value)
                {
                    if (this._BookDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBookIDChanging(value);
                    this.SendPropertyChanging("BookID");
                    this._BookID = value;
                    this.SendPropertyChanged("BookID");
                    this.OnBookIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AuthorID in the schema.
        /// </summary>
        [Column(Storage = "_AuthorID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int AuthorID
        {
            get
            {
                return this._AuthorID;
            }
            set
            {
                if (this._AuthorID != value)
                {
                    if (this._Author.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAuthorIDChanging(value);
                    this.SendPropertyChanging("AuthorID");
                    this._AuthorID = value;
                    this.SendPropertyChanged("AuthorID");
                    this.OnAuthorIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Author_BookAuthor", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
        public Author Author
        {
            get
            {
                return this._Author.Entity;
            }
            set
            {
                Author previousValue = this._Author.Entity;
                if ((previousValue != value) || (this._Author.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Author");
                    if (previousValue != null)
                    {
                        this._Author.Entity = null;
                        previousValue.BookAuthors.Remove(this);
                    }
                    this._Author.Entity = value;
                    if (value != null)
                    {
                        this._AuthorID = value.AuthorID;
                        value.BookAuthors.Add(this);
                    }
                    else
                    {
                        this._AuthorID = default(int);
                    }
                    this.SendPropertyChanged("Author");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_BookAuthor", Storage="_BookDetail", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
        public BookDetail BookDetail
        {
            get
            {
                return this._BookDetail.Entity;
            }
            set
            {
                BookDetail previousValue = this._BookDetail.Entity;
                if ((previousValue != value) || (this._BookDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("BookDetail");
                    if (previousValue != null)
                    {
                        this._BookDetail.Entity = null;
                        previousValue.BookAuthors.Remove(this);
                    }
                    this._BookDetail.Entity = value;
                    if (value != null)
                    {
                        this._BookID = value.BookID;
                        value.BookAuthors.Add(this);
                    }
                    else
                    {
                        this._BookID = default(int);
                    }
                    this.SendPropertyChanged("BookDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.BookDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.BookDetail")]
    public partial class BookDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BookID;

        private string _BookName;

        private string _Publisher;

        private int? _Noofcopies;

        private int? _Price;

        private string _Edition;

        private int? _UserID;
        #pragma warning restore 0649

        private EntitySet<BookAuthor> _BookAuthors;

        private EntityRef<User1> _User1;

        private EntitySet<BookIssue> _BookIssues;

        private EntitySet<Report> _Reports;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBookIDChanging(int value);
        partial void OnBookIDChanged();
        partial void OnBookNameChanging(string value);
        partial void OnBookNameChanged();
        partial void OnPublisherChanging(string value);
        partial void OnPublisherChanged();
        partial void OnNoofcopiesChanging(int? value);
        partial void OnNoofcopiesChanged();
        partial void OnPriceChanging(int? value);
        partial void OnPriceChanged();
        partial void OnEditionChanging(string value);
        partial void OnEditionChanged();
        partial void OnUserIDChanging(int? value);
        partial void OnUserIDChanged();
        #endregion

        public BookDetail()
        {
            this._BookAuthors = new EntitySet<BookAuthor>(new Action<BookAuthor>(this.attach_BookAuthors), new Action<BookAuthor>(this.detach_BookAuthors));
            this._User1  = default(EntityRef<User1>);
            this._BookIssues = new EntitySet<BookIssue>(new Action<BookIssue>(this.attach_BookIssues), new Action<BookIssue>(this.detach_BookIssues));
            this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BookID in the schema.
        /// </summary>
        [Column(Storage = "_BookID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BookID
        {
            get
            {
                return this._BookID;
            }
            set
            {
                if (this._BookID != value)
                {
                    this.OnBookIDChanging(value);
                    this.SendPropertyChanging("BookID");
                    this._BookID = value;
                    this.SendPropertyChanged("BookID");
                    this.OnBookIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookName in the schema.
        /// </summary>
        [Column(Storage = "_BookName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string BookName
        {
            get
            {
                return this._BookName;
            }
            set
            {
                if (this._BookName != value)
                {
                    this.OnBookNameChanging(value);
                    this.SendPropertyChanging("BookName");
                    this._BookName = value;
                    this.SendPropertyChanged("BookName");
                    this.OnBookNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Publisher in the schema.
        /// </summary>
        [Column(Storage = "_Publisher", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Publisher
        {
            get
            {
                return this._Publisher;
            }
            set
            {
                if (this._Publisher != value)
                {
                    this.OnPublisherChanging(value);
                    this.SendPropertyChanging("Publisher");
                    this._Publisher = value;
                    this.SendPropertyChanged("Publisher");
                    this.OnPublisherChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Noofcopies in the schema.
        /// </summary>
        [Column(Storage = "_Noofcopies", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Noofcopies
        {
            get
            {
                return this._Noofcopies;
            }
            set
            {
                if (this._Noofcopies != value)
                {
                    this.OnNoofcopiesChanging(value);
                    this.SendPropertyChanging("Noofcopies");
                    this._Noofcopies = value;
                    this.SendPropertyChanged("Noofcopies");
                    this.OnNoofcopiesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Edition in the schema.
        /// </summary>
        [Column(Storage = "_Edition", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Edition
        {
            get
            {
                return this._Edition;
            }
            set
            {
                if (this._Edition != value)
                {
                    this.OnEditionChanging(value);
                    this.SendPropertyChanging("Edition");
                    this._Edition = value;
                    this.SendPropertyChanged("Edition");
                    this.OnEditionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookAuthors in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_BookAuthor", Storage="_BookAuthors", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
        public EntitySet<BookAuthor> BookAuthors
        {
            get
            {
                return this._BookAuthors;
            }
            set
            {
                this._BookAuthors.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_BookDetail", Storage="_User1", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User1 User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User1 previousValue = this._User1.Entity;
                if ((previousValue != value) || (this._User1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User1");
                    if (previousValue != null)
                    {
                        this._User1.Entity = null;
                        previousValue.BookDetails.Remove(this);
                    }
                    this._User1.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.BookDetails.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int?);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookIssues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_BookIssue", Storage="_BookIssues", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
        public EntitySet<BookIssue> BookIssues
        {
            get
            {
                return this._BookIssues;
            }
            set
            {
                this._BookIssues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Reports in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_Report", Storage="_Reports", ThisKey="BookID", OtherKey="BookID", DeleteRule="NO ACTION")]
        public EntitySet<Report> Reports
        {
            get
            {
                return this._Reports;
            }
            set
            {
                this._Reports.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BookAuthors(BookAuthor entity)
        {
            this.SendPropertyChanging("BookAuthors");
            entity.BookDetail = this;
        }
    
        private void detach_BookAuthors(BookAuthor entity)
        {
            this.SendPropertyChanging("BookAuthors");
            entity.BookDetail = null;
        }

        private void attach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.BookDetail = this;
        }
    
        private void detach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.BookDetail = null;
        }

        private void attach_Reports(Report entity)
        {
            this.SendPropertyChanging("Reports");
            entity.BookDetail = this;
        }
    
        private void detach_Reports(Report entity)
        {
            this.SendPropertyChanging("Reports");
            entity.BookDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.BookIssue in the schema.
    /// </summary>
    [Table(Name = @"dbo.BookIssue")]
    public partial class BookIssue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IssueID;

        private int _BookID;

        private string _BName;

        private int _UserID;

        private System.DateTime? _Issuedate;

        private System.DateTime? _Returndate;
        #pragma warning restore 0649

        private EntityRef<User1> _User1;

        private EntityRef<BookDetail> _BookDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIssueIDChanging(int value);
        partial void OnIssueIDChanged();
        partial void OnBookIDChanging(int value);
        partial void OnBookIDChanged();
        partial void OnBNameChanging(string value);
        partial void OnBNameChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnIssuedateChanging(System.DateTime? value);
        partial void OnIssuedateChanged();
        partial void OnReturndateChanging(System.DateTime? value);
        partial void OnReturndateChanged();
        #endregion

        public BookIssue()
        {
            this._User1  = default(EntityRef<User1>);
            this._BookDetail  = default(EntityRef<BookDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IssueID in the schema.
        /// </summary>
        [Column(Storage = "_IssueID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IssueID
        {
            get
            {
                return this._IssueID;
            }
            set
            {
                if (this._IssueID != value)
                {
                    this.OnIssueIDChanging(value);
                    this.SendPropertyChanging("IssueID");
                    this._IssueID = value;
                    this.SendPropertyChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookID in the schema.
        /// </summary>
        [Column(Storage = "_BookID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BookID
        {
            get
            {
                return this._BookID;
            }
            set
            {
                if (this._BookID != value)
                {
                    if (this._BookDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBookIDChanging(value);
                    this.SendPropertyChanging("BookID");
                    this._BookID = value;
                    this.SendPropertyChanged("BookID");
                    this.OnBookIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BName in the schema.
        /// </summary>
        [Column(Storage = "_BName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BName
        {
            get
            {
                return this._BName;
            }
            set
            {
                if (this._BName != value)
                {
                    this.OnBNameChanging(value);
                    this.SendPropertyChanging("BName");
                    this._BName = value;
                    this.SendPropertyChanged("BName");
                    this.OnBNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issuedate in the schema.
        /// </summary>
        [Column(Storage = "_Issuedate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Issuedate
        {
            get
            {
                return this._Issuedate;
            }
            set
            {
                if (this._Issuedate != value)
                {
                    this.OnIssuedateChanging(value);
                    this.SendPropertyChanging("Issuedate");
                    this._Issuedate = value;
                    this.SendPropertyChanged("Issuedate");
                    this.OnIssuedateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Returndate in the schema.
        /// </summary>
        [Column(Storage = "_Returndate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Returndate
        {
            get
            {
                return this._Returndate;
            }
            set
            {
                if (this._Returndate != value)
                {
                    this.OnReturndateChanging(value);
                    this.SendPropertyChanging("Returndate");
                    this._Returndate = value;
                    this.SendPropertyChanged("Returndate");
                    this.OnReturndateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_BookIssue", Storage="_User1", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User1 User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User1 previousValue = this._User1.Entity;
                if ((previousValue != value) || (this._User1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User1");
                    if (previousValue != null)
                    {
                        this._User1.Entity = null;
                        previousValue.BookIssues.Remove(this);
                    }
                    this._User1.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.BookIssues.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_BookIssue", Storage="_BookDetail", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
        public BookDetail BookDetail
        {
            get
            {
                return this._BookDetail.Entity;
            }
            set
            {
                BookDetail previousValue = this._BookDetail.Entity;
                if ((previousValue != value) || (this._BookDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("BookDetail");
                    if (previousValue != null)
                    {
                        this._BookDetail.Entity = null;
                        previousValue.BookIssues.Remove(this);
                    }
                    this._BookDetail.Entity = value;
                    if (value != null)
                    {
                        this._BookID = value.BookID;
                        value.BookIssues.Add(this);
                    }
                    else
                    {
                        this._BookID = default(int);
                    }
                    this.SendPropertyChanged("BookDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.BookReturn in the schema.
    /// </summary>
    [Table(Name = @"dbo.BookReturn")]
    public partial class BookReturn : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReturnID;

        private string _BName;

        private int _UserID;

        private System.DateTime _Returndate;

        private int _Extraday;
        #pragma warning restore 0649

        private EntityRef<User1> _User1;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReturnIDChanging(int value);
        partial void OnReturnIDChanged();
        partial void OnBNameChanging(string value);
        partial void OnBNameChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnReturndateChanging(System.DateTime value);
        partial void OnReturndateChanged();
        partial void OnExtradayChanging(int value);
        partial void OnExtradayChanged();
        #endregion

        public BookReturn()
        {
            this._User1  = default(EntityRef<User1>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReturnID in the schema.
        /// </summary>
        [Column(Storage = "_ReturnID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ReturnID
        {
            get
            {
                return this._ReturnID;
            }
            set
            {
                if (this._ReturnID != value)
                {
                    this.OnReturnIDChanging(value);
                    this.SendPropertyChanging("ReturnID");
                    this._ReturnID = value;
                    this.SendPropertyChanged("ReturnID");
                    this.OnReturnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BName in the schema.
        /// </summary>
        [Column(Storage = "_BName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BName
        {
            get
            {
                return this._BName;
            }
            set
            {
                if (this._BName != value)
                {
                    this.OnBNameChanging(value);
                    this.SendPropertyChanging("BName");
                    this._BName = value;
                    this.SendPropertyChanged("BName");
                    this.OnBNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Returndate in the schema.
        /// </summary>
        [Column(Storage = "_Returndate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Returndate
        {
            get
            {
                return this._Returndate;
            }
            set
            {
                if (this._Returndate != value)
                {
                    this.OnReturndateChanging(value);
                    this.SendPropertyChanging("Returndate");
                    this._Returndate = value;
                    this.SendPropertyChanged("Returndate");
                    this.OnReturndateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Extraday in the schema.
        /// </summary>
        [Column(Storage = "_Extraday", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Extraday
        {
            get
            {
                return this._Extraday;
            }
            set
            {
                if (this._Extraday != value)
                {
                    this.OnExtradayChanging(value);
                    this.SendPropertyChanging("Extraday");
                    this._Extraday = value;
                    this.SendPropertyChanged("Extraday");
                    this.OnExtradayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_BookReturn", Storage="_User1", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User1 User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User1 previousValue = this._User1.Entity;
                if ((previousValue != value) || (this._User1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User1");
                    if (previousValue != null)
                    {
                        this._User1.Entity = null;
                        previousValue.BookReturns.Remove(this);
                    }
                    this._User1.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.BookReturns.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.Report in the schema.
    /// </summary>
    [Table(Name = @"dbo.Reports")]
    public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SlipID;

        private System.DateTime _Issuedate;

        private System.DateTime _Returndate;

        private bool _IsIssue;

        private int _UserID;

        private int _BookID;
        #pragma warning restore 0649

        private EntityRef<User1> _User1;

        private EntityRef<BookDetail> _BookDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSlipIDChanging(int value);
        partial void OnSlipIDChanged();
        partial void OnIssuedateChanging(System.DateTime value);
        partial void OnIssuedateChanged();
        partial void OnReturndateChanging(System.DateTime value);
        partial void OnReturndateChanged();
        partial void OnIsIssueChanging(bool value);
        partial void OnIsIssueChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnBookIDChanging(int value);
        partial void OnBookIDChanged();
        #endregion

        public Report()
        {
            this._User1  = default(EntityRef<User1>);
            this._BookDetail  = default(EntityRef<BookDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SlipID in the schema.
        /// </summary>
        [Column(Storage = "_SlipID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SlipID
        {
            get
            {
                return this._SlipID;
            }
            set
            {
                if (this._SlipID != value)
                {
                    this.OnSlipIDChanging(value);
                    this.SendPropertyChanging("SlipID");
                    this._SlipID = value;
                    this.SendPropertyChanged("SlipID");
                    this.OnSlipIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issuedate in the schema.
        /// </summary>
        [Column(Storage = "_Issuedate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Issuedate
        {
            get
            {
                return this._Issuedate;
            }
            set
            {
                if (this._Issuedate != value)
                {
                    this.OnIssuedateChanging(value);
                    this.SendPropertyChanging("Issuedate");
                    this._Issuedate = value;
                    this.SendPropertyChanged("Issuedate");
                    this.OnIssuedateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Returndate in the schema.
        /// </summary>
        [Column(Storage = "_Returndate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Returndate
        {
            get
            {
                return this._Returndate;
            }
            set
            {
                if (this._Returndate != value)
                {
                    this.OnReturndateChanging(value);
                    this.SendPropertyChanging("Returndate");
                    this._Returndate = value;
                    this.SendPropertyChanged("Returndate");
                    this.OnReturndateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsIssue in the schema.
        /// </summary>
        [Column(Storage = "_IsIssue", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsIssue
        {
            get
            {
                return this._IsIssue;
            }
            set
            {
                if (this._IsIssue != value)
                {
                    this.OnIsIssueChanging(value);
                    this.SendPropertyChanging("IsIssue");
                    this._IsIssue = value;
                    this.SendPropertyChanged("IsIssue");
                    this.OnIsIssueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookID in the schema.
        /// </summary>
        [Column(Storage = "_BookID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BookID
        {
            get
            {
                return this._BookID;
            }
            set
            {
                if (this._BookID != value)
                {
                    if (this._BookDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBookIDChanging(value);
                    this.SendPropertyChanging("BookID");
                    this._BookID = value;
                    this.SendPropertyChanged("BookID");
                    this.OnBookIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_Report", Storage="_User1", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User1 User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User1 previousValue = this._User1.Entity;
                if ((previousValue != value) || (this._User1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User1");
                    if (previousValue != null)
                    {
                        this._User1.Entity = null;
                        previousValue.Reports.Remove(this);
                    }
                    this._User1.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.Reports.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="BookDetail_Report", Storage="_BookDetail", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
        public BookDetail BookDetail
        {
            get
            {
                return this._BookDetail.Entity;
            }
            set
            {
                BookDetail previousValue = this._BookDetail.Entity;
                if ((previousValue != value) || (this._BookDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("BookDetail");
                    if (previousValue != null)
                    {
                        this._BookDetail.Entity = null;
                        previousValue.Reports.Remove(this);
                    }
                    this._BookDetail.Entity = value;
                    if (value != null)
                    {
                        this._BookID = value.BookID;
                        value.Reports.Add(this);
                    }
                    else
                    {
                        this._BookID = default(int);
                    }
                    this.SendPropertyChanged("BookDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleID;

        private string _RName;
        #pragma warning restore 0649

        private EntitySet<User1> _User1s;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnRNameChanging(string value);
        partial void OnRNameChanged();
        #endregion

        public Role()
        {
            this._User1s = new EntitySet<User1>(new Action<User1>(this.attach_User1s), new Action<User1>(this.detach_User1s));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RName in the schema.
        /// </summary>
        [Column(Storage = "_RName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string RName
        {
            get
            {
                return this._RName;
            }
            set
            {
                if (this._RName != value)
                {
                    this.OnRNameChanging(value);
                    this.SendPropertyChanging("RName");
                    this._RName = value;
                    this.SendPropertyChanged("RName");
                    this.OnRNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User1s in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User1", Storage="_User1s", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
        public EntitySet<User1> User1s
        {
            get
            {
                return this._User1s;
            }
            set
            {
                this._User1s.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_User1s(User1 entity)
        {
            this.SendPropertyChanging("User1s");
            entity.Role = this;
        }
    
        private void detach_User1s(User1 entity)
        {
            this.SendPropertyChanging("User1s");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for PraticelinqDatabseContext.User1 in the schema.
    /// </summary>
    [Table(Name = @"dbo.user1")]
    public partial class User1 : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _UserName;

        private string _Password;

        private int? _RoleID;

        private int _UserID;
        #pragma warning restore 0649

        private EntitySet<BookDetail> _BookDetails;

        private EntitySet<BookIssue> _BookIssues;

        private EntitySet<BookReturn> _BookReturns;

        private EntitySet<Report> _Reports;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnRoleIDChanging(int? value);
        partial void OnRoleIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        #endregion

        public User1()
        {
            this._BookDetails = new EntitySet<BookDetail>(new Action<BookDetail>(this.attach_BookDetails), new Action<BookDetail>(this.detach_BookDetails));
            this._BookIssues = new EntitySet<BookIssue>(new Action<BookIssue>(this.attach_BookIssues), new Action<BookIssue>(this.detach_BookIssues));
            this._BookReturns = new EntitySet<BookReturn>(new Action<BookReturn>(this.attach_BookReturns), new Action<BookReturn>(this.detach_BookReturns));
            this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_BookDetail", Storage="_BookDetails", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<BookDetail> BookDetails
        {
            get
            {
                return this._BookDetails;
            }
            set
            {
                this._BookDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for BookIssues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_BookIssue", Storage="_BookIssues", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<BookIssue> BookIssues
        {
            get
            {
                return this._BookIssues;
            }
            set
            {
                this._BookIssues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for BookReturns in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_BookReturn", Storage="_BookReturns", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<BookReturn> BookReturns
        {
            get
            {
                return this._BookReturns;
            }
            set
            {
                this._BookReturns.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Reports in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User1_Report", Storage="_Reports", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<Report> Reports
        {
            get
            {
                return this._Reports;
            }
            set
            {
                this._Reports.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User1", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.User1s.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleID = value.RoleID;
                        value.User1s.Add(this);
                    }
                    else
                    {
                        this._RoleID = default(int?);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BookDetails(BookDetail entity)
        {
            this.SendPropertyChanging("BookDetails");
            entity.User1 = this;
        }
    
        private void detach_BookDetails(BookDetail entity)
        {
            this.SendPropertyChanging("BookDetails");
            entity.User1 = null;
        }

        private void attach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.User1 = this;
        }
    
        private void detach_BookIssues(BookIssue entity)
        {
            this.SendPropertyChanging("BookIssues");
            entity.User1 = null;
        }

        private void attach_BookReturns(BookReturn entity)
        {
            this.SendPropertyChanging("BookReturns");
            entity.User1 = this;
        }
    
        private void detach_BookReturns(BookReturn entity)
        {
            this.SendPropertyChanging("BookReturns");
            entity.User1 = null;
        }

        private void attach_Reports(Report entity)
        {
            this.SendPropertyChanging("Reports");
            entity.User1 = this;
        }
    
        private void detach_Reports(Report entity)
        {
            this.SendPropertyChanging("Reports");
            entity.User1 = null;
        }
    }

}
